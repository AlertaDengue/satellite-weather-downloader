version: "3.4"
services:
  rabbitmq:
    image: rabbitmq:3-management
    hostname: rabbitmq
    ports:
      - ${RBTMQAMQP_PORT}:${RBTMQAMQP_PORT}
      - ${RBTMQHTTP_PORT}:${RBTMQHTTP_PORT}
      - ${RBTMQ_PORT}:${RBTMQ_PORT}
    volumes:
      - ${RBTMQ_CONFIG_DIR}/rabbitmq.conf:/var/lib/rabbitmq/rabbitmq.conf
    environment:
      - RABBITMQ_CONFIG_FILE=/var/lib/rabbitmq/rabbitmq.conf
    networks:
      - satellite
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "${RBTMQ_PORT}"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 10s

  worker:
    build:
      context: ".."
      dockerfile: "docker/Dockerfile"
      args:
        HOST_UID: ${HOST_UID}
        HOST_GID: ${HOST_GID}
        # ENV: ${ENV}
    env_file:
      - ../.env
    environment:
      - CELERY_BROKER_URL=amqp://${RBTMQ_USER}:${RBTMQ_PASSWORD}@rabbitmq:${RBTMQAMQP_PORT}
      - PSQL_HOST=${PSQL_HOST}
      - PSQL_PORT=${PSQL_PORT}
    networks:
      - satellite
    volumes:
      - ../../logs:/var/log/
      - ../satellite_weather_downloader/celery_app:/opt/services/satellite_weather_downloader/celery_app
    depends_on:
      - rabbitmq
    restart: always
    healthcheck:
      test: ["CMD-SHELL", 'celery --app satellite_weather_downloader.celery_app.celeryapp.app inspect ping -d "celery@$${HOSTNAME}"']
      interval: 60s
      timeout: 10s
      retries: 5
      start_period: 30s

networks:
  satellite:
      driver: bridge
